# Generated by Django 2.2.7 on 2019-11-21 00:10

from django.db import migrations
from adventure.world_gen import World

def populate_database(apps, schema_editor):
    """
    Creates a procedurally generated world then adds the constituent rooms to the DB.
    """
    db_alias = schema_editor.connection.alias
    Room = apps.get_model('adventure', 'Room')
    rooms = []

    w = World()
    width = 51
    height = 51
    w.depth_first_room_generator(width, height)

    # ids = []
    # for i in range(len(w.grid)):
    #     for j in range(len(w.grid[i])):
    #         if w.grid[i][j] != None:
    #             ids.append(w.grid[i][j].id)

    # print(f'length of set of ids in grid{len(ids)}')
    # print(f'ids in grid: {ids}')

    for i in range(len(w.grid)):
        for j in range(len(w.grid[i])):
            if w.grid[i][j] != None:
                # It's a room object! let's put it into the database!
                obj = w.grid[i][j]

                # print(f'obj id {obj.id}')

                new_room = Room(id = obj.id, title = obj.name, description = obj.description)
                
                # new_room.id = obj.id
                # new_room.title=obj.name,
                # new_room.description=obj.description
                
                try:
                    new_room.n_to = obj.n_to.id
                except:
                    new_room.n_to = 0
                
                try:
                    new_room.s_to = obj.s_to.id
                except:
                    new_room.s_to = 0
                
                try:
                    new_room.e_to = obj.e_to.id    
                except:
                    new_room.e_to = 0

                try:
                    new_room.w_to = obj.w_to.id    
                except:
                    new_room.w_to = 0
                
                new_room.x = obj.x
                new_room.y = obj.y

                rooms.append(new_room)

        # [print(room.id) for room in rooms]

    Room.objects.using(db_alias).bulk_create(rooms)


class Migration(migrations.Migration):

    dependencies = [
        ('adventure', '0002_auto_20191121_0009'),
    ]

    operations = [
        migrations.RunPython(populate_database)
    ]
